head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	92.01.04.03.43.24;	author muckel;	state Exp;
branches;
next	1.4;

1.4
date	91.11.25.06.49.01;	author muckel;	state Exp;
branches;
next	1.3;

1.3
date	91.11.25.05.28.59;	author muckel;	state Exp;
branches;
next	1.2;

1.2
date	91.11.25.04.23.10;	author muckel;	state Exp;
branches;
next	1.1;

1.1
date	91.11.25.02.05.30;	author muckel;	state Exp;
branches;
next	;


desc
@@


1.5
log
@/dev/null
@
text
@/* 
 * bedkillall.c - This program sends out a kill request to all backend daemons
 * 
 * Author:	Jim Griffioen/Shawn Oostermann
 * 		Dept. of Computer Sciences
 * 		Purdue University
 * Date:	Mon Jun  6 20:36:46 1988
 */

#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <signal.h>
#include <setjmp.h>
#include <errno.h>

#include "bed.h"
#include "netutils.h"
#include "status.h"

jmp_buf env;			/* used to return from read time-outs	*/
int errno;		        /* error number when system err		*/
int quit();

/*---------------------------------------------------------------------------
 * main (csb, rgsb)
 *---------------------------------------------------------------------------
 */
main ( csb, rgsb )
     int csb;
     char *rgsb[];
{
	if ( csb > 1 ) {
		fprintf( stderr, "usage: bedkillall\n" );
		exit( 1 );
	}
	killall();
	exit( 0 );
}


/*----------------------------------------------------------------------
 * killall - send a quit message to all back end daemons
 *----------------------------------------------------------------------
 */
killall()
{
	int fd_sock;
	int status;
	struct bm bm;
	int i;
	int len;
	struct sockaddr_in sa;
	int salen;


	initsigs();			/* initialize interrupts	*/
	

	/***** set up broadcast connection *****/
	fd_sock = socket( AF_INET, SOCK_DGRAM, 0 );

	bm.ver = CURVER;
	sprintf( bm.cmd, "%d", REQ_QUIT );
	strncpy ( bm.detail, "detail", MAXDETAIL );

	status = BroadcastUDP( fd_sock, (char *) &bm, lbm, KNOWN_UDP_PORT );

	if ( status < 0 ) {
		fprintf(stderr, "error: sendto(broadcast) failed\n");
		exit(1);
	}
	
	i = 0;
	while ( TRUE ) {
		settimer( XSTIMEOUT );
		/* eventually we will timeout and jump here */
		if ( setjmp( env ) == EINTR ) {
			canceltimer();
			printf( "Kill backend daemon on %d machines\n", i );
			return( i );	/* return number of machines	*/
		}
		salen = sizeof( struct sockaddr_in );
		len = recvfrom( fd_sock, &bm, lbm, 0, &sa, &salen );
		if ( len <= 0 ) {
			canceltimer();
			fprintf( stderr, "error: recvfrom failed\n" );
			exit( 1 );
		}
		canceltimer();
		printf( "Killed bed on machine '%s'\n", bm.detail );
		i++;
	}
}

/*---------------------------------------------------------------------------
 * alarmhandler - return from alarm calls
 *---------------------------------------------------------------------------
 */
static
alarmhandler()
{
	signal( SIGALRM, alarmhandler );
	longjmp( env, EINTR );
	/* not reached */
}

/*---------------------------------------------------------------------------
 * quit() -
 *---------------------------------------------------------------------------
 */
quit()
{
	exit( 0 );
}

/*---------------------------------------------------------------------------
 * initsigs() - initialize interrupts
 *---------------------------------------------------------------------------
 */
static
initsigs()
{
	int alarmhandler();
	
	if ( signal( SIGINT,SIG_IGN ) != SIG_IGN ) {
		signal( SIGINT, quit );
	}
	if ( signal( SIGTERM, SIG_IGN ) != SIG_IGN ) {
		signal( SIGTERM, quit );
	}
	if ( signal( SIGQUIT, SIG_IGN ) != SIG_IGN ) {
		signal( SIGQUIT, quit );
	}
	signal( SIGALRM, alarmhandler );
}




@


1.4
log
@*** empty log message ***
@
text
@@


1.3
log
@/dev/null
@
text
@d54 2
d57 1
d84 2
a85 1
		len = recvfrom( fd_sock, &bm, lbm, 0, 0 );
@


1.2
log
@/dev/null
@
text
@d30 1
a30 1
main ( csb , rgsb )
d35 1
a35 1
		fprintf( stderr , "usage: bedkillall\n" );
a50 3
	struct sockaddr_in sa;
	struct sockaddr_in sa_to;
	int salen;
a53 1
	int on = 1;			/* set socket option broadcast on*/
d59 1
a59 1
	fd_sock = socket( AF_INET , SOCK_DGRAM , 0 );
a60 18
	/* set socket options so we can broadcast the IP address back */
	if ( setsockopt( fd_sock , SOL_SOCKET , SO_BROADCAST , &on ,
			sizeof( on ) ) < 0 ) {
		fprintf( stderr , "error: not able to broadcast\n" );
		exit( 1 );
	}

	sa.sin_family = AF_INET;
	sa.sin_port   = htons( 0 );
	sa.sin_addr.s_addr = INADDR_ANY;
	status = bind( fd_sock , &sa , sizeof( struct sockaddr_in ) );

	sa_to.sin_family = AF_INET;
	sa_to.sin_port = htons( KNOWN_UDP_PORT );
	sa_to.sin_addr.s_addr = htonl( INADDR_BROADCAST );

	/***** broadcasting is now set up *****/

d62 2
a63 2
	sprintf( bm.cmd , "%d" , REQ_QUIT );
	strncpy ( bm.detail , "detail" , MAXDETAIL );
d65 1
a65 2
	status = sendto( fd_sock , (char *) &bm , lbm , 0 ,
			&sa_to , sizeof( struct sockaddr_in ) );
d78 1
a78 1
			printf( "Kill backend daemon on %d machines\n" , i );
d81 1
a81 2
		salen = sizeof( struct sockaddr_in );
		len = recvfrom( fd_sock , &bm , lbm , 0 , &sa , &salen );
d84 1
a84 1
			fprintf( stderr , "error: recvfrom failed\n" );
d88 1
a88 1
		printf( "Killed bed on machine '%s'\n" , bm.detail );
d100 2
a101 2
	signal( SIGALRM , alarmhandler );
	longjmp( env , EINTR );
d123 2
a124 2
	if ( signal( SIGINT ,SIG_IGN ) != SIG_IGN ) {
		signal( SIGINT , quit );
d126 2
a127 2
	if ( signal( SIGTERM , SIG_IGN ) != SIG_IGN ) {
		signal( SIGTERM , quit );
d129 2
a130 2
	if ( signal( SIGQUIT , SIG_IGN ) != SIG_IGN ) {
		signal( SIGQUIT , quit );
d132 1
a132 1
	signal( SIGALRM , alarmhandler );
@


1.1
log
@Initial revision
@
text
@a64 1
#if defined(SEQ) || defined(VAX) || defined(DEC)
a70 1
#endif
a78 2
	
#if defined(SEQ) || defined(VAX) || defined(DEC)
a79 6
#endif
	
#if defined(SUN)
	/* SUN local net broadcast	*/
	sa_to.sin_addr.s_addr = htonl( BROADCAST );
#endif
@
