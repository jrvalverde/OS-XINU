head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	91.11.25.09.42.06;	author muckel;	state Exp;
branches;
next	1.3;

1.3
date	91.11.25.05.28.07;	author muckel;	state Exp;
branches;
next	1.2;

1.2
date	91.11.25.04.22.50;	author muckel;	state Exp;
branches;
next	1.1;

1.1
date	91.11.25.02.06.04;	author muckel;	state Exp;
branches;
next	;


desc
@@


1.4
log
@/dev/null
@
text
@/* bmutils.c - Routines for sending and receiving bm structure (bed protocol)
 * 
 * Author:	Shawn Oostermann/Jim Griffioen
 * 		Dept. of Computer Sciences
 * 		Purdue University
 * Date:	Thu Jun  9 20:53:41 1988
 */

#include <stdio.h>
#include <netdb.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>

#include "bed.h"

#define NULLCH '\00'    

/*---------------------------------------------------------------------------
 * bmsend - send a bm struct in a UDP packet
 *---------------------------------------------------------------------------
 */
int
bmsend( s, pbm, len, flags )
    int s;
    struct bm *pbm;
    int len, flags;
{
	return( send( s, (char *) pbm, len, flags ) );
}
     

/*---------------------------------------------------------------------------
 * bmsendto - send a bm struct in a UDP packet to a specific machine
 *---------------------------------------------------------------------------
 */
int
bmsendto( s, pbm, len, flags, to, tolen )
    int s;
    struct bm *pbm;
    int len, flags;
    struct sockaddr_in *to;
    int tolen;
{
	return( sendto( s, (char *) pbm, len, flags, to, tolen ) );
}
     

/*---------------------------------------------------------------------------
 * bmrecv - receive a bm structure in a UDP packet
 *---------------------------------------------------------------------------
 */
int
bmrecv( s, pbm, len, flags )
    int s;
    struct bm *pbm;
    int len, flags;
{
	static char bufrecv[ MAXNETPACKET ];
	int status;

	if ( ( status = recv( s, bufrecv, MAXNETPACKET, flags ) ) <= 0 ) {
		return( status );
	}
	bcopy( bufrecv, (char *) pbm, sizeof( struct bm ) );
	return( sizeof( struct bm ) );
}
     


/*---------------------------------------------------------------------------
 * bmrecvfrom - receive a bm structure from a specified machine
 *---------------------------------------------------------------------------
 */
int
bmrecvfrom( s, pbm, len, flags, to, tolen )
    int s;
    struct bm *pbm;
    int len, flags;
    struct sockaddr_in *to;
    int tolen;
{
	static char bufrecv[ MAXNETPACKET ];
	int status;
	
	status = recvfrom( s, bufrecv, MAXNETPACKET, flags, to, tolen );
	if ( status <= 0 ) {
		return( status );
	}
	bcopy( bufrecv, (char *) pbm, sizeof( struct bm ) );
	return( sizeof( struct bm ) );
}
@


1.3
log
@/dev/null
@
text
@a13 1
#include <arpa/inet.h>
@


1.2
log
@/dev/null
@
text
@d25 1
a25 1
bmsend( s , pbm , len , flags )
d30 1
a30 1
	return( send( s , (char *) pbm , len , flags ) );
d39 1
a39 1
bmsendto( s , pbm , len , flags , to , tolen )
d46 1
a46 1
	return( sendto( s , (char *) pbm , len , flags , to , tolen ) );
d55 1
a55 1
bmrecv( s , pbm , len , flags )
d63 1
a63 1
	if ( ( status = recv( s , bufrecv , MAXNETPACKET , flags ) ) <= 0 ) {
d66 1
a66 1
	bcopy( bufrecv , (char *) pbm , sizeof( struct bm ) );
d77 1
a77 1
bmrecvfrom( s , pbm , len , flags , to , tolen )
d87 1
a87 1
	status = recvfrom( s , bufrecv , MAXNETPACKET , flags , to , tolen );
d91 1
a91 1
	bcopy( bufrecv , (char *) pbm , sizeof( struct bm ) );
@


1.1
log
@Initial revision
@
text
@a9 1
#include <strings.h>
@
