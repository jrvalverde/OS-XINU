head	1.7;
access;
symbols;
locks; strict;
comment	@ * @;


1.7
date	92.01.04.03.43.16;	author muckel;	state Exp;
branches;
next	1.6;

1.6
date	91.11.25.18.16.12;	author muckel;	state Exp;
branches;
next	1.5;

1.5
date	91.11.25.09.42.21;	author muckel;	state Exp;
branches;
next	1.4;

1.4
date	91.11.25.05.49.23;	author muckel;	state Exp;
branches;
next	1.3;

1.3
date	91.11.25.05.28.38;	author muckel;	state Exp;
branches;
next	1.2;

1.2
date	91.11.25.04.23.01;	author muckel;	state Exp;
branches;
next	1.1;

1.1
date	91.11.25.02.06.04;	author muckel;	state Exp;
branches;
next	;


desc
@@


1.7
log
@/dev/null
@
text
@/* statusrequest.c - 
 * 
 * Author:	Jim Griffioen
 * 		Dept. of Computer Sciences
 * 		Purdue University
 * Date:	Fri May 20 11:57:03 1988
 */


#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>

#include <signal.h>
#include <setjmp.h>
#include <errno.h>
#include <sys/file.h>
#include <sys/stat.h>
#include <ctype.h>

#include "bed.h"
#include "bmutils.h"
#include "netutils.h"
#include "status.h"

extern int errno;		/* error number when system err		*/
jmp_buf env;			/* used to return from read time-outs	*/

extern char *xmalloc();

#define MAXBEDS		200
#define MAXLINELENGTH 	256

extern char * getenv();
extern char * index();

/*----------------------------------------------------------------------
 * statusrequest - obtain socket and send request
 *----------------------------------------------------------------------
 */
int
statusrequest()
{
	int fd_sock;
	int status;
	struct sockaddr_in sa;
	struct sockaddr_in sa_to;
	int salen;
	int i;
	struct bm bm;
	struct bm *bmtmp;
	int len;
	int maxbuff, lmb;	/* used to increase socket buf	*/
	int on = 1;		/* used to set socket options on*/
	struct stat statbuf;	/* status of file struct	*/
	char * beds[ MAXBEDS ];	/* names of bedservers		*/
	int numbeds;		/* number of bedservers		*/
	int bcast;
	char * sb;
	
	
	initsigs();		/* initialize interrupts	*/
	
	if ( ( fd_sock = socket( AF_INET, SOCK_DGRAM, 0 ) ) < 0 ) {
		fprintf( stderr, "error: socket failed\n" );
		return( -1 );
	}
	
#if defined(SUN) || defined(DEC) || defined(VAX) || defined(SEQ)

	maxbuff = BIGBUFSIZE;
	lmb = sizeof( maxbuff );
	if ( setsockopt( fd_sock, SOL_SOCKET, SO_RCVBUF,
			(char *) & maxbuff, lmb )!=0 ) {
		fprintf( stderr, "error: setsockopt falied\n" );
		return( -1 );
	}

#endif
		
	bcast = 0;
	numbeds = 0;
	beds[ 0 ] = NULL;
	if ( ( ( sb = getenv( ENVBEDSERVERS ) ) != NULL ) &&
		 ( *sb != '\0' ) ) {
		if ( *sb == ':' ) {
			sb++;
			numbeds = getbedsFromString( beds, sb );
		}
		else {
			numbeds = getbedsFromFile( beds, sb );
		}
	}
	else if ( stat( BEDSERVERS_FILE, & statbuf ) == 0 ) {
		numbeds = getbedsFromFile( beds, BEDSERVERS_FILE );
	}
	else {
		bcast = 1;
	}
	if ( numbeds < 0 ) {
		return( -1 );
	}
	if ( bcast == 0 ) {
		bcast = fakemulticast( beds, numbeds, fd_sock );
	}
	if ( bcast > 0 ) {
		bm.ver = CURVER;
		sprintf( bm.cmd, "%d", REQ_STATUS );
		strncpy( bm.detail, "detail", MAXDETAIL );

		status = BroadcastUDP( fd_sock, (char *) &bm, lbm,
				      KNOWN_UDP_PORT );
		
		if ( status < 0 ) {
			fprintf( stderr,
				"error: broadcasting status request failed\n");
			return( -1 );
		}
	}
	return( fd_sock );
}

extern char *fgets();

/*
 *---------------------------------------------------------------------------
 * getbedsFromFile - read the BEDSERVERS file and return # of bed servers
 *---------------------------------------------------------------------------
 */
static int
getbedsFromFile( beds, filename )
     char * beds[];
     char * filename;
{
	FILE * fs;	
	char * sb;
	char * p;
	int	i;	
	
	if ( ( fs = fopen( filename, "r" ) ) == (FILE *) NULL ) {
		fprintf( stderr, "error: unable to open file %s\n",filename);
		return( -1 );
	}
	i = 0;
	beds[ 0 ] = (char *) xmalloc( MAXLINELENGTH + 1 );
	while ( fgets( beds[ i ], MAXLINELENGTH, fs ) != NULL ) {
		if ( ( (*beds[i]) == '#' ) ) {
			continue;
		}
		for ( p = beds[ i ]; *p != '\0' && isspace( *p ); p++ ) {
			/* null statement */;
		}
		if ( *p == '\0' ) {
			continue;
		}
		for ( sb = beds[ i ]; *p != '\0' && !isspace( *p ); ) {
			*sb++ = *p++;
		}
		*sb = '\0';
		i++;
		beds[ i ] = (char *) xmalloc( MAXLINELENGTH + 1 );
	}
	free( beds[ i ] );
	beds[ i ] = NULL;
	return( i );
}

/*
 *---------------------------------------------------------------------------
 * getbedsFromString - read the BEDSERVERS from the environment variable
 *---------------------------------------------------------------------------
 */
static int
getbedsFromString( beds, sb)
     char * beds[];
     char * sb;
{
	char * envBed;
	char * p;
	int	i;
	
	envBed = xmalloc( strlen( sb ) + 1 );
	strcpy( envBed, sb );
	i = 0;
	while ( envBed != NULL && *envBed != '\0' ){
		if ( ( sb = index( envBed, ':' ) ) != NULL ) {
			*sb = '\0';
			beds[ i ] = envBed;
			envBed = sb + 1;
		}
		else {
			beds[ i ] = envBed;
			envBed = NULL;
		}
		i++;
	}
	beds[ i ] = NULL;
	return( i );
}

/*
 *---------------------------------------------------------------------------
 * fakemulticast - Fake a multicast by sending to the given list of bed servers
 *---------------------------------------------------------------------------
 */
static int fakemulticast( beds, numbeds, fd_sock )
     char *beds[];
     int numbeds;
     int fd_sock;
{
	int status;
	struct sockaddr_in sa;
	struct sockaddr_in sa_to;
	int i;
	struct bm bm;
	struct stat statbuf;		/* status of file struct	*/
	struct hostent *phent;		/* host network entry		*/
	int bcast;
	unsigned long inet_addr(), addr;
	
	sa.sin_family = AF_INET;
	sa.sin_port   = htons( 0 );
	sa.sin_addr.s_addr = INADDR_ANY;
	status = bind( fd_sock, & sa, sizeof( struct sockaddr_in ) );
	
	bcast = 0;
	for ( i = 0; i < numbeds; i++ ) {
		if ( ! strcmp( "*", beds[ i ] ) ) {
			bcast = 1;
			continue;
		}
		if ( strlen( beds[ i ] ) == 0 ) {
			continue;
		}
		sa_to.sin_family = AF_INET;
		sa_to.sin_port   = htons( KNOWN_UDP_PORT );
		if ( ( addr = inet_addr( beds[ i ] ) ) != -1 ) {
			bcopy( (char *) &addr, (char *) &sa_to.sin_addr,
			      sizeof( unsigned long ) );
		}
		else if ( ( phent = gethostbyname( beds[ i ] ) ) != NULL ) {
			bcopy( phent->h_addr, (char *)&sa_to.sin_addr,
			      phent->h_length );
		}
		else {
			fprintf( stderr, "warning: unknown host '%s'\n",
				beds[ i ] );
			continue;
		}
		
		bm.ver = CURVER;
		sprintf( bm.cmd, "%d", REQ_STATUS );
		strncpy ( bm.detail, "detail", MAXDETAIL );
		status = sendto( fd_sock, (char *) &bm, lbm, 0,
				&sa_to, sizeof( struct sockaddr_in ) );
		if ( status < 0 ) {
			fprintf( stderr,
				"warning: sendto(status request) failed\n",
				beds[ i ]);
		}
	}
	return( bcast );
}

/*
 *---------------------------------------------------------------------------
 * alarmhandler - return from alarm calls
 *---------------------------------------------------------------------------
 */
static void
alarmhandler()
{
	signal( SIGALRM, alarmhandler );
	longjmp( env, EINTR );
	/* not reached */
}

/*
 *---------------------------------------------------------------------------
 * inthandler -- interrupt processing
 *---------------------------------------------------------------------------
 */
static void
inthandler()
{
	exit( 2 );
}
/*
 *---------------------------------------------------------------------------
 * initsigs() - initialize interrupts
 *---------------------------------------------------------------------------
 */
static 
initsigs()
{
	if ( signal( SIGINT,SIG_IGN ) != SIG_IGN ) {
		signal( SIGINT,inthandler );
	}
	if ( signal( SIGTERM, SIG_IGN) != SIG_IGN ) {
		signal( SIGTERM, inthandler );
	}
	if ( signal( SIGQUIT, SIG_IGN ) != SIG_IGN ) {
		signal( SIGQUIT, inthandler );
	}
	signal( SIGALRM, alarmhandler );
}
@


1.6
log
@/dev/null
@
text
@d44 1
a44 2
statusrequest( bedserversfile )
     char * bedserversfile;
d86 1
a86 4
	if ( *bedserversfile != '\0' ) {
		numbeds = getbedsFromFile( beds, bedserversfile );
	}
	else if ( ( ( sb = getenv( ENVBEDSERVERS ) ) != NULL ) &&
d88 7
a94 5
		numbeds = getbedsFromString( beds, sb );
	}
	else if ( ( ( sb = getenv( ENVBEDSERVERSFILE ) ) != NULL ) &&
		 ( *sb != '\0' ) && ( stat( sb, & statbuf ) == 0 ) ) {
		numbeds = getbedsFromFile( beds, sb );
@


1.5
log
@/dev/null
@
text
@d72 2
d75 1
a75 2
	lmb = sizeof( maxbuff );	/* req'd for getsockopt */
		
d81 2
@


1.4
log
@*** empty log message ***
@
text
@a13 1
#include <arpa/inet.h>
a22 1
#include "String.h"
@


1.3
log
@/dev/null
@
text
@d123 1
a123 1
	return( 1 );
@


1.2
log
@/dev/null
@
text
@d69 2
a70 2
	if ( ( fd_sock = socket( AF_INET , SOCK_DGRAM , 0 ) ) < 0 ) {
		fprintf( stderr , "error: socket failed\n" );
d77 3
a79 3
	if ( setsockopt( fd_sock , SOL_SOCKET , SO_RCVBUF ,
			(char *) & maxbuff , lmb )!=0 ) {
		fprintf( stderr , "error: setsockopt falied\n" );
d87 1
a87 1
		numbeds = getbedsFromFile( beds , bedserversfile );
d91 1
a91 1
		numbeds = getbedsFromString( beds , sb );
d94 2
a95 2
		 ( *sb != '\0' ) && ( stat( sb , & statbuf ) == 0 ) ) {
		numbeds = getbedsFromFile( beds , sb );
d97 2
a98 2
	else if ( stat( BEDSERVERS_FILE , & statbuf ) == 0 ) {
		numbeds = getbedsFromFile( beds , BEDSERVERS_FILE );
d107 1
a107 1
		bcast = fakemulticast( beds , numbeds , fd_sock );
d110 3
a112 7
		/***** set up broadcast connection *****/
		/* set socket options so we can broadcast the IP addr back */
		if ( setsockopt( fd_sock , SOL_SOCKET , SO_BROADCAST ,
				& on , sizeof( on ) ) < 0 ) {
			fprintf( stderr , "error: not able to broadcast\n" );
			return( -1 );
		}
d114 2
a115 8
		sa.sin_family = AF_INET;
		sa.sin_port   = htons( 0 );
		sa.sin_addr.s_addr = INADDR_ANY;
		status = bind( fd_sock , &sa , sizeof( struct sockaddr_in ) );
		
		sa_to.sin_family = AF_INET;
		sa_to.sin_port   = htons( KNOWN_UDP_PORT );
		sa_to.sin_addr.s_addr = htonl( INADDR_BROADCAST );
a116 8
		/***** broadcasting is now set up *****/
		
		bm.ver = CURVER;
		sprintf( bm.cmd , "%d" , REQ_STATUS );
		strncpy( bm.detail , "detail" , MAXDETAIL );
		
		status = sendto( fd_sock , (char *) &bm , lbm , 0 ,
				&sa_to, sizeof( struct sockaddr_in ) );
d118 1
a118 1
			fprintf( stderr ,
d123 1
a123 1
	return( fd_sock );
d134 1
a134 1
getbedsFromFile( beds , filename )
d143 2
a144 2
	if ( ( fs = fopen( filename , "r" ) ) == (FILE *) NULL ) {
		fprintf( stderr , "error: unable to open file %s\n" ,filename);
d149 1
a149 1
	while ( fgets( beds[ i ] , MAXLINELENGTH , fs ) != NULL ) {
d177 1
a177 1
getbedsFromString( beds , sb)
d186 1
a186 1
	strcpy( envBed , sb );
d189 1
a189 1
		if ( ( sb = index( envBed , ':' ) ) != NULL ) {
d209 1
a209 1
static int fakemulticast( beds , numbeds , fd_sock )
d227 1
a227 1
	status = bind( fd_sock , & sa , sizeof( struct sockaddr_in ) );
d231 1
a231 1
		if ( ! strcmp( "*" , beds[ i ] ) ) {
d241 1
a241 1
			bcopy( (char *) &addr , (char *) &sa_to.sin_addr ,
d245 1
a245 1
			bcopy( phent->h_addr , (char *)&sa_to.sin_addr ,
d249 1
a249 1
			fprintf( stderr , "warning: unknown host '%s'\n" ,
d255 4
a258 4
		sprintf( bm.cmd , "%d" , REQ_STATUS );
		strncpy ( bm.detail , "detail" , MAXDETAIL );
		status = sendto( fd_sock, (char *) &bm , lbm , 0 ,
				&sa_to , sizeof( struct sockaddr_in ) );
d260 2
a261 2
			fprintf( stderr ,
				"warning: sendto(status request) failed\n" ,
d276 2
a277 2
	signal( SIGALRM , alarmhandler );
	longjmp( env , EINTR );
d299 2
a300 2
	if ( signal( SIGINT ,SIG_IGN ) != SIG_IGN ) {
		signal( SIGINT ,inthandler );
d302 2
a303 2
	if ( signal( SIGTERM , SIG_IGN) != SIG_IGN ) {
		signal( SIGTERM , inthandler );
d305 2
a306 2
	if ( signal( SIGQUIT , SIG_IGN ) != SIG_IGN ) {
		signal( SIGQUIT , inthandler );
d308 1
a308 1
	signal( SIGALRM , alarmhandler );
@


1.1
log
@Initial revision
@
text
@d24 1
a24 9
#if defined(SEQ) || defined(DEC)
#include <strings.h>
#endif

#if defined(SUN) || defined(VAX)
#include <string.h>	
#endif


d74 9
a110 1
#if defined(SEQ) || defined(VAX) || defined(DEC) 
d117 1
a117 14
		
#if defined(VAX) || defined(DEC)
		maxbuff = 40*1024;		/* bigger UDP buffer 	*/
		lmb = sizeof( maxbuff );	/* req'd for getsockopt */
		
		if ( setsockopt( fd_sock , SOL_SOCKET , SO_RCVBUF ,
				(char *) & maxbuff , lmb )!=0 ) {
			fprintf( stderr , "error: setsockopt falied\n" );
			return( -1 );
		}
#endif	/* VAX || DEC 		*/
		
#endif	/* SEQ || VAX	 	*/
		
a124 2
		
#if defined(SEQ) || defined(VAX) || defined(DEC)
a125 1
#endif	
a126 4
#if defined(SUN)
		sa_to.sin_addr.s_addr = htonl( BROADCAST );
#endif	/* SUN 	*/
		
a236 1
	int maxbuff, lmb;		/* used to increase socket buf	*/
a240 10
	
#if defined(VAX) || defined(DEC)
	maxbuff = 40*1024;		/* bigger UDP buffer 	*/
	lmb = sizeof(maxbuff);		/* req'd for getsockopt */
	if ( setsockopt( fd_sock , SOL_SOCKET , SO_RCVBUF ,
			(char *) & maxbuff , lmb ) !=0 ) {
		fprintf( stderr , "error: setsockopt failed \n" );
		return( -1 );
	}
#endif	
@
