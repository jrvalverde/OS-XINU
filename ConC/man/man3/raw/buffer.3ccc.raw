.TH BUFFER 3CCC
.SH NAME
freebuf, getbuf, mkpool, poolinit \- buffer pool routines
.SH SYNOPSIS
.nf
.B int freebuf(buf);
.B char *buf;
.sp
.B char *getbuf(poolid);
.B int poolid;
.sp
.B poolid = mkpool(bufsiz, numbufs)
.B int poolid;
.B int bufsiz, numbufs;
.sp
.B int poolinit()
.fi
.SH DESCRIPTION
The routine
.I poolinit
initializes the entire buffer pool manager.
It may be ignored, since the other routines in the package calls it
if not initialized.
.PP
.I Mkpool
creates a pool of
.I numbufs
buffers, each of size
.I bufsiz,
and returns an integer poolid identifying the pool.
If no more pools can be created, or if the arguments are incorrect,
.I mkpool
returns -1.
.PP
Once a pool has been created,
.I getbuf
obtains a free buffer from the pool given by
.I poolid,
and returns a pointer to the first word of the buffer.
If all buffers in the specified pool are in use, the
calling process will be blocked until a buffer becomes
available.
If the argument
.I poolid
does not specify a valid pool,
getbuf returns the null pointer.
.PP
.I Freebuf
returns a buffer to the pool from which it was allocated.
.I Freebuf
returns 0 for normal completion, -1 if
.I buf
does not point to a valid buffer from a buffer pool.
.SH BUGS
At present there is no way to reclaim space from buffer pools once
they are no longer needed.
