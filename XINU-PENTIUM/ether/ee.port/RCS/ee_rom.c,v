head	1.2;
access;
symbols;
locks
	lin:1.2; strict;
comment	@ * @;


1.2
date	95.02.11.18.18.36;	author lin;	state Exp;
branches;
next	1.1;

1.1
date	95.02.09.21.13.42;	author lin;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@/* ee_rom - ee_romread */

#include <conf.h>
#include <kernel.h>
#include <network.h>
#include <i386.h>
#include <ee.h>

#define	ROMDELAY()	{ DELAY(1); }

/*------------------------------------------------------------------------
 * ee_romread - read PROM data
 *------------------------------------------------------------------------
 */
unsigned short
ee_romread(csr, from)
int		csr;		/* base I/O address		*/
int		from;		/* EEPROM offset (words)	*/
{
    unsigned char	data, out;
    unsigned short	rv;
    int		i, j;

    outb(csr + EEC, EEC_586R);	/* reset 586		*/
    ROMDELAY();
    outb(csr + EEC, EEC_586R|EEC_GAR);
    DELAY(500);
    outb(csr + EEC, EEC_586R);
    ROMDELAY();
    outb(csr + EEC, 0);

    out = EEC_586R|EEC_CS;
    outb(csr + EEC, out);		/* select PROM		*/
    ROMDELAY();

    ee_romwrite(csr, EEX_READ, 3);
    ee_romwrite(csr, from, 6);	/* max 64 16-bit regs	*/
    rv = 0;
    for (i=0; i<16; ++i) {
	outb(csr+EEC, out | EEC_SK);
	ROMDELAY();
	data = inb(csr+EEC);
	data &= EEC_DO;
	rv <<= 1;
	rv |= ((unsigned short)data >> 3);
	outb(csr+EEC, out & ~EEC_SK);
	ROMDELAY();
    }

    outb(csr + EEC, 0);	/* clear 586 reset */
    return rv;
}

/*------------------------------------------------------------------------
 * ee_romwrite - write PROM data
 *------------------------------------------------------------------------
 */
ee_romwrite(csr, offset, nbits)
int	csr;
int	offset;
int	nbits;
{
    unsigned char	x, eec;
    unsigned short	mask;

    x = EEC_586R | EEC_CS;
    for (mask = 1 << (nbits - 1); mask != 0; mask >>= 1) {
	x &= 0xFB;
	if ((offset & mask) != 0)
	    x |= EEC_DI;
	outb(csr+EEC, x);
	ROMDELAY();
		
	/* clock */
	outb(csr+EEC, x | EEC_SK);
	ROMDELAY()
	    outb(csr+EEC, x & ~EEC_SK);
	ROMDELAY();
    }
    outb(csr+EEC, x & 0xFB);
}


struct etdev	ee[Neth];	/* should be "Nee" */
@


1.1
log
@Initial revision
@
text
@d20 21
a40 9
	unsigned char	data, out;
	unsigned short	rv;
	int		i, j;

	outb(csr + EEC, EEC_586R);	/* reset 586		*/
	ROMDELAY();
	outb(csr + EEC, EEC_586R|EEC_GAR);
	DELAY(500);
	outb(csr + EEC, EEC_586R);
d42 5
a46 4
	outb(csr + EEC, 0);

	out = EEC_586R|EEC_CS;
	outb(csr + EEC, out);		/* select PROM		*/
d48 1
d50 2
a51 16
	ee_romwrite(csr, EEX_READ, 3);
	ee_romwrite(csr, from, 6);	/* max 64 16-bit regs	*/
	rv = 0;
	for (i=0; i<16; ++i) {
		outb(csr+EEC, out | EEC_SK);
		ROMDELAY();
		data = inb(csr+EEC);
		data &= EEC_DO;
		rv <<= 1;
		rv |= ((unsigned short)data >> 3);
		outb(csr+EEC, out & ~EEC_SK);
		ROMDELAY();
	}

	outb(csr + EEC, 0);	/* clear 586 reset */
	return rv;
d54 4
d63 2
a64 2
	unsigned char	x, eec;
	unsigned short	mask;
d66 7
a72 7
	x = EEC_586R | EEC_CS;
	for (mask = 1 << (nbits - 1); mask != 0; mask >>= 1) {
		x &= 0xFB;
		if ((offset & mask) != 0)
			x |= EEC_DI;
		outb(csr+EEC, x);
		ROMDELAY();
d74 7
a80 7
		/* clock */
		outb(csr+EEC, x | EEC_SK);
		ROMDELAY()
		outb(csr+EEC, x & ~EEC_SK);
		ROMDELAY();
	}
	outb(csr+EEC, x & 0xFB);
@
